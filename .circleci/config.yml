version: 2.1

executors:
  basic-executor:
    resource_class: small
    docker:
      - image: cimg/ruby:3.3.1-browsers
  test-executor:
    resource_class: medium
    docker:
      - image: checkclientqualifiesdocker/circleci-image:puppeteer-22121
        auth:
          username: $DOCKERHUB_USER_CCQ
          password: $DOCKERHUB_PAT_CCQ
        environment:
          VCR_RECORD_MODE: none
          COVERAGE: true
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: user
          TZ: "Europe/London"
          PARALLEL_TEST_PROCESSORS: 5
          PARALLEL_TEST_FIRST_IS_1: true
      - image: cimg/postgres:11.21
        environment:
          POSTGRES_USER: user
          POSTGRES_DB: ccq_test
  e2e-executor:
    resource_class: small
    docker:
      - image: cimg/ruby:3.3.1-browsers
        environment:
          VCR_RECORD_MODE: none
          COVERAGE: true
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: user
          TZ: "Europe/London"
          CFE_HOST: http://localhost:3000
      - image: cimg/postgres:10.18
        environment:
          POSTGRES_USER: user
          POSTGRES_DB: ccq_test
      - image: $CFE_ECR_ENDPOINT
        aws_auth:
          oidc_role_arn: $CFE_CIVIL_ECR_ROLE_TO_ASSUME
        environment:
          SECRET_KEY_BASE: can_be_anything
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: cfe_db
          POSTGRES_DATABASE: cfe
          RAILS_ENV: production
          LEGAL_FRAMEWORK_API_HOST: https://legal-framework-api-staging.cloud-platform.service.justice.gov.uk
      - image: cimg/postgres:14.8
        name: cfe_db
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
  cloud-platform-executor:
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.1
        environment:
          GITHUB_TEAM_NAME_SLUG: check-client-qualifies
          TZ: Europe/London

references:
  authenticate_k8s: &authenticate_k8s
    run:
      name: Authenticate with cluster
      command: |
        echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
        kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
        kubectl config set-credentials circleci --token=${K8S_TOKEN}
        kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
        kubectl config use-context ${K8S_CLUSTER_NAME}
        echo ${K8S_CLUSTER_NAME}

  setup_database: &setup_database
    run:
      name: Database Setup
      command: |
        bundle exec rake db:create db:schema:load
        bundle exec rake db:migrate

  setup_parallel_database: &setup_parallel_database
    run:
      name: Parallel Database Setup
      command: |
        bundle exec rake db:schema:load
        bundle exec rake parallel:setup

orbs:
  aws-cli: circleci/aws-cli@4.1.2
  aws-ecr: circleci/aws-ecr@9.0
  jira: circleci/jira@2.1.0
  slack: circleci/slack@4.5.2

jobs:
  install_dependencies:
    executor: basic-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: check-client-qualifies-{{ checksum "Gemfile.lock" }}-v1-{{ checksum "yarn.lock" }}
      - run:
          name: Which bundler?
          command: bundle -v
      - run:
          name: Install yarn modules
          command: yarn install
      - run:
          name: Install ruby gems
          command: |
            bundle config set path 'vendor/bundle'
            bundle config set without 'development'
            bundle check || {
              # Install CMake - required to install undercover gem
              sudo apt update && sudo apt install cmake
              # Install missing gems
              bundle install
            }
      - run:
          name: Install postgres client
          command: sudo apt-get install -y postgresql-client
      - run:
          name: Compile assets for test run
          command: bundle exec rake test:prepare
      - save_cache:
          key: check-client-qualifies-{{ checksum "Gemfile.lock" }}-v1-{{ checksum "yarn.lock" }}
          paths:
            - vendor/bundle
            - node_modules
      - persist_to_workspace:
          root: ./
          paths:
            - vendor/bundle
            - node_modules
            - app/assets/builds
            - .bundle/config
      - slack/notify:
          channel: eligibility-alerts-uat
          event: fail
          template: basic_fail_1
          branch_pattern: main
  run_specs:
    executor: test-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *setup_parallel_database
      - run:
          name: Run tests
          command: |
            bundle exec rake parallel:spec

      - store_test_results:
          path: /tmp/test-results/rspec

      - persist_to_workspace:
          root: ./
          paths:
            - tmp/parallel_runtime_rspec.log

      - store_artifacts:
          path: coverage
      - slack/notify:
          channel: eligibility-alerts-uat
          event: fail
          template: basic_fail_1
          branch_pattern: main
  end2end_tests:
    executor: e2e-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *setup_database
      - run:
          name: Prepare for test run
          command: bundle exec rake test:prepare
      - run:
          name: Run CFE End to End tests
          command: |
            COVERAGE=false bundle exec rspec -t end2end --format documentation spec/**/**_spec.rb
  linters:
    executor: basic-executor
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: erb-lint checks
          command: |
            bundle exec erblint --lint-all
      - run:
          name: Slim Lint
          command: |
            bundle exec slim-lint **/*.slim
      - slack/notify:
          channel: eligibility-alerts-uat
          event: fail
          template: basic_fail_1
          branch_pattern: main
  build_and_push:
    executor:
      name: aws-ecr/default
      docker_layer_caching: true
    steps:
      - checkout
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME_CCQ
          region: $ECR_REGION
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      - run:
          name: Set ECR_TAG environment variable for use in next step
          command: |
            [[ "$CIRCLE_BRANCH" == "main" ]] && ECR_TAG="main-$CIRCLE_SHA1" || ECR_TAG="branch-$CIRCLE_SHA1"
            echo "export ECR_TAG=$ECR_TAG" >> "$BASH_ENV"
            source "$BASH_ENV"
      - aws-ecr/build_image:
          push_image: true
          account_id: $AWS_ECR_REGISTRY_ID
          tag: $ECR_TAG
          region: $ECR_REGION
          repo: $ECR_REPOSITORY_CCQ
      - jira/notify:
          job_type: build
          pipeline_id: << pipeline.id >>
          pipeline_number: << pipeline.number >>
  deploy:
    parameters:
      environment:
        type: string
    executor: cloud-platform-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *authenticate_k8s
      - run:
          name: Deploy LAA Check-your-client-qualifies-for-legal-aid service to << parameters.environment >>
          command: |
            ./bin/deploy << parameters.environment >>
      - slack/notify:
          channel: eligibility-alerts-<< parameters.environment >>
          event: fail
          template: basic_fail_1
  deploy_infrastructure_uat:
    executor: cloud-platform-executor
    steps:
      - checkout
      - *authenticate_k8s
      - run:
          name: Deploy LAA Check-your-client-qualifies-for-legal-aid service's /infrastructure to UAT
          command: |
            kubectl apply --record=false -f ./infrastructure/laa-check-client-qualifies-uat/
      - slack/notify:
          channel: eligibility-alerts-uat
          event: fail
          template: basic_fail_1

workflows:
  run_ci:
    jobs:
      - install_dependencies
      - linters:
          requires:
            - install_dependencies
      - run_specs:
          requires:
            - install_dependencies
      - end2end_tests:
          requires:
            - install_dependencies
      - build_and_push:
          requires:
            - install_dependencies
      - deploy:
          name: Deploy to UAT
          environment: ccq-uat
          context: laa-check-client-qualifies-uat
          requires:
            - run_specs
            - end2end_tests
            - linters
            - build_and_push
          post-steps:
            - jira/notify:
                job_type: deployment
                environment: UAT
                environment_type: testing
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>
      - deploy:
          name: Deploy to Staging
          environment: ccq-staging
          context: laa-check-client-qualifies-staging
          requires:
            - run_specs
            - end2end_tests
            - linters
            - build_and_push
            - Deploy to UAT
          post-steps:
            - jira/notify:
                job_type: deployment
                environment: Staging
                environment_type: staging
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>
          filters:
            branches:
              only:
                - main

# Keeping this step commented out because we will need
# again in the future, the requires production_deploy_approval
# in Deploy to Production is also commented out

#      - production_deploy_approval:
#          type: approval
#          requires:
#            - Deploy to Staging
#          filters:
#            branches:
#              only:
#                - main
      - deploy:
          name: Deploy to Production
          environment: ccq-production
          context: laa-check-client-qualifies-production
          requires:
            - run_specs
            - end2end_tests
            - linters
            - build_and_push
            - Deploy to Staging
#            - production_deploy_approval
          post-steps:
            - jira/notify:
                job_type: deployment
                environment: Production
                environment_type: production
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>
          filters:
            branches:
              only:
                - main
      - deploy_infrastructure_uat:
          context: laa-check-client-qualifies-uat
          filters:
            branches:
              only:
                - main
