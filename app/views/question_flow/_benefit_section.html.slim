- counter ||= nil
. data-add-another-role="section" id=("section-#{counter}" if counter)
  .add-another-heading
    h2.govuk-heading-m
      = t("question_flow.benefit_details.benefit")
      span< data-add-another-role="counter" = counter
    - if removeable
      button.govuk-button.govuk-button--secondary type="button" data-add-another-role="remove" = t("generic.remove")

  .govuk-form-group [role="combobox"
                     aria-owns="benefit-model-benefit-type-field"
                     aria-haspopup="listbox"
                     aria-expanded="false"
                     class=("govuk-form-group--error" if model.errors.messages[:benefit_type].any?)]
    - id_pattern = model.errors.messages[:benefit_type].any? ? "benefit-details-form-items-ID-benefit-type-field-error" : "ID-type"
    label.govuk-label [for=id_pattern.gsub("ID", counter.to_s)
                       data-add-another-dynamic-elements="for:#{id_pattern}"] = t("question_flow.benefit_details.benefit_type")
    .govuk-hint
      = t("question_flow.benefit_details.benefit_type_hint")
    - if model.errors.messages[:benefit_type].any?
      p.govuk-error-message
        span.govuk-visually-hidden = t("generic.error_prefix")
        = model.errors.messages[:benefit_type].first
    input.govuk-input.govuk-input--width-20 [
      autocomplete="off"
      data-suggestions="suggestions"
      data-module="govuk-input"
      type="text"
      name="benefit_model[items][#{counter}][benefit_type]"
      value=model.benefit_type
      id=id_pattern.gsub("ID", counter.to_s)
      data-add-another-dynamic-elements="id:#{id_pattern},name:benefit_model[items][ID][benefit_type]"
      class=("govuk-input--error" if model.errors.messages[:benefit_type].any?)
    ]

  = render "shared/add_another/money_field",
           errors: model.errors.messages[:benefit_amount],
           form_name: "benefit_details_form",
           model_name: "benefit_model",
           field_name: "benefit_amount",
           counter:,
           label: t("question_flow.benefit_details.enter_amount"),
           value: model.benefit_amount

  = render "shared/add_another/radio_field",
           errors: model.errors.messages[:benefit_frequency],
           legend: t("question_flow.benefit_details.select_frequency"),
           model_name: "benefit_model",
           field_name: "benefit_frequency",
           options: model.benefit_options,
           form_name: "benefit_details_form",
           value: model.benefit_frequency,
           counter:
