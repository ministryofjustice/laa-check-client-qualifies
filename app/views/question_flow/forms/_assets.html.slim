- partner ||= false

ruby:
  investment_hint_key = if @check.partner
                           "question_flow.assets.investments.hint.with_partner"
                        else
                           "question_flow.assets.investments.hint.single"
                        end

  valuables_hint_key = if @check.partner
                          "question_flow.assets.valuables.hint.#{@check.level_of_help}.with_partner"
                       else
                          "question_flow.assets.valuables.hint.#{@check.level_of_help}.single"
                       end

- content_for :amount_hidden_description
  = govuk_visually_hidden(t("question_flow.other_income.hidden_description_amount"))

div [data-module="add-another"
  data-add-another-removed-feedback-text=t("question_flow.assets.removed")
  data-add-another-hide-message-text=t("generic.hide_this_message")]
  .add-another-template-area data-add-another-role="template"
    = render "bank_account_section",
             removeable: true,
             model: @form.blank_model,
             form_name: (partner ? "partner_assets_form" : "client_assets_form")

  = form_for(@form, url: request.path, method: :put) do |form|

    = form.govuk_error_summary t("generic.error_summary_title")
    = render "shared/heading",
              header_text: t("question_flow.#{i18n_key}.legend"),
              post_header_texts: hints,
              tag: (:partner if partner)

    - if !@check.controlled? && ((partner && @check.partner_self_employed?) || (!partner && @check.client_self_employed?))
      = govuk_details(summary_text: t("question_flow.#{i18n_key}.business_capital_title"))
        p.govuk-text = t("question_flow.#{i18n_key}.business_capital_text")
        p.govuk-text = t("question_flow.#{i18n_key}.business_capital_text_html",
                        page_url: document_link(:lc_guidance_certificated, :business_capital))

    h2.govuk-heading-m = t("question_flow.assets.bank_accounts.label")

    - if @check.partner && i18n_key == "assets"
      - t("question_flow.#{i18n_key}.bank_accounts.with_partner_hints").each do
        .govuk-hint = _1
    - else
      - t("question_flow.#{i18n_key}.bank_accounts.hints").each do
        .govuk-hint = _1

    = render "shared/cost_of_living"
    = render "shared/special_circumstances", i18n_key:
    div data-add-another-role="sectionList"
      - @form.items.each_with_index do |bank_account, index|
        = render "bank_account_section",
                  removeable: index.positive?,
                  model: bank_account,
                  counter: index + 1,
                  form_name: (partner ? "partner_assets_form" : "client_assets_form")
    .govuk-button-group
      button.govuk-button.govuk-button--secondary type="button" data-add-another-role="add" = t("question_flow.assets.add_bank_account")

    - if !FeatureFlags.enabled?(:legacy_assets_no_reveal, @check.session_data)
      = form.govuk_radio_buttons_fieldset :investments_relevant,
              legend: { text: t("question_flow.#{i18n_key}.investments.label") },
              hint: { text: t(investment_hint_key) } do
        = render "shared/radio_button_set",
                form:,
                field_name: :investments_relevant,
                buttons: [{ value: true,
                        options: { label: { text: t("generic.yes_choice") },
                                hint: -> { content_for(:amount_hidden_description) } } },
                        { value: false, options: { label: { text: t("generic.no_choice") } } }]

          = render "shared/money_input",
                  form:,
                  field: :investments,
                  width: 5,
                  label_text: t("question_flow.#{i18n_key}.investments.input")

          - if show_smod_content
            .govuk-form-group
              = form.govuk_check_box :investments_in_dispute, true, 0, multiple: false, label: { text: t("generic.dispute") }
    - else
      = form.govuk_fieldset legend: { text: t("question_flow.#{i18n_key}.investments.label") } do

        - if @check.partner && i18n_key == "assets"
          - t("question_flow.#{i18n_key}.investments.with_partner_hints").each
            .govuk-hint = _1
        - else
          - t("question_flow.#{i18n_key}.investments.hints").each
            .govuk-hint = _1

        = render "shared/money_input",
              form:,
              field: :investments,
              width: 5,
              label_text: t("question_flow.#{i18n_key}.investments.input")

        - if show_smod_content
          .govuk-form-group
            = form.govuk_check_box :investments_in_dispute, true, 0, multiple: false, label: { text: t("generic.dispute") }

    - if !FeatureFlags.enabled?(:legacy_assets_no_reveal, @check.session_data)
      = form.govuk_radio_buttons_fieldset :valuables_relevant,
              legend: { text: t("question_flow.#{i18n_key}.valuables.label") },
              hint: { text: t(valuables_hint_key) } do
        = render "shared/radio_button_set",
                form:,
                field_name: :valuables_relevant,
                buttons: [{ value: true,
                        options: { label: { text: t("generic.yes_choice") },
                                hint: -> { content_for(:amount_hidden_description) } } },
                        { value: false, options: { label: { text: t("generic.no_choice") } } }]

          = render "shared/money_input",
                  form:,
                  field: :valuables,
                  width: 5,
                  label_text: t("question_flow.#{i18n_key}.valuables.input")

          - if show_smod_content
            .govuk-form-group
              = form.govuk_check_box :valuables_in_dispute, true, 0, multiple: false, label: { text: t("generic.dispute") }
    - else
      = form.govuk_fieldset legend: { text: t("question_flow.#{i18n_key}.valuables.label") } do

        - if @check.partner && i18n_key == "assets"
          - t("question_flow.assets.valuables.#{@check.level_of_help}_with_partner_hints").each
            .govuk-hint = _1
        - else
          - t("question_flow.#{i18n_key}.valuables.#{@check.level_of_help}_hints").each
            .govuk-hint = _1

        = govuk_details(summary_text: t("question_flow.assets.valuables.details_header")) do
          p.govuk-body = t("question_flow.assets.valuables.details_subheader_1")
          ul.govuk-list.govuk-list--bullet
            - t("question_flow.#{i18n_key}.valuables.details_bullets_1").each do |bullet|
              li = bullet
            - if @check.controlled?
              li = t("question_flow.assets.valuables.controlled_details_bullets_1_addendum")
          p.govuk-body = t("question_flow.assets.valuables.details_subheader_2")
          ul.govuk-list.govuk-list--bullet
            - t("question_flow.assets.valuables.details_bullets_2").each do |bullet|
              li = bullet

        = render "shared/money_input",
                  form:,
                  field: :valuables,
                  width: 5,
                  label_text: t("question_flow.assets.valuables.input")

        - if show_smod_content
          .govuk-form-group
            = form.govuk_check_box :valuables_in_dispute, true, 0, multiple: false, label: { text: t("generic.dispute") }

    = form.govuk_submit t("generic.save_and_continue")
