- partner ||= false
= form_for(@form, url: request.path, method: :put) do |form|
  = form.govuk_error_summary t("generic.error_summary_title")
  = render "shared/heading",
            header_text: t("question_flow.#{i18n_key}.heading"),
            post_header_text: (t("question_flow.#{i18n_key}.second_caption") unless FeatureFlags.enabled?(:conditional_reveals,
                                                                                                          @check.session_data)),
            tag: (:partner if partner)
  - OtherIncomeForm::REGULAR_INCOME_TYPES.each do |type|
    - if FeatureFlags.enabled?(:conditional_reveals, @check.session_data)
      = form.govuk_radio_buttons_fieldset :"#{type}_received",
            legend: { text: t("question_flow.#{i18n_key}.#{type}.question") },
            hint: { text: t("question_flow.#{i18n_key}.#{type}.question_hint") } do
        = render "shared/radio_button_set",
                form:,
                field_name: :"#{type}_received",
                buttons: [{ value: true, options: { label: { text: t("generic.yes_choice") } } },
                          { value: false, options: { label: { text: t("generic.no_choice") } } }]
          = render "shared/money_input",
                  form:,
                  field: :"#{type}_conditional_value",
                  width: 10,
                  label_text: t("question_flow.other_income.amount")

          = form.govuk_collection_radio_buttons :"#{type}_frequency",
                                                @form.frequencies,
                                                :first,
                                                :last,
                                                legend: -> { tag.p(t("question_flow.other_income.frequency")) }
    - else
      h2.govuk-heading-m class="govuk-!-margin-bottom-2"
        = t("question_flow.#{i18n_key}.#{type}.label")
      span.govuk-caption-m class="govuk-!-margin-bottom-4"
        = t("question_flow.#{i18n_key}.#{type}.hint")

      = render "shared/money_input",
              form:,
              field: :"#{type}_value",
              width: 10,
              label_text: t("question_flow.#{i18n_key}.#{type}.instruction"),
              set_aria: true

      = form.govuk_collection_radio_buttons :"#{type}_frequency",
                                            @form.frequencies,
                                            :first,
                                            :last,
                                            legend: -> { tag.p(t("question_flow.#{i18n_key}.enter_frequency")) }

  - OtherIncomeForm::IRREGULAR_INCOME_TYPES.each do |type|
    - if FeatureFlags.enabled?(:conditional_reveals, @check.session_data)
      = form.govuk_radio_buttons_fieldset :"#{type}_received",
            legend: { text: t("question_flow.#{i18n_key}.#{type}.question") },
            hint: { text: t("question_flow.#{i18n_key}.#{type}.question_hint") } do
        - if type == :other
          = render "shared/cost_of_living"
        = render "shared/radio_button_set",
                form:,
                field_name: :"#{type}_received",
                buttons: [{ value: true, options: { label: { text: t("generic.yes_choice") } } },
                          { value: false, options: { label: { text: t("generic.no_choice") } } }]

          - level = @check.controlled? ? "controlled" : "certificated"
          = render "shared/money_input",
                  form:,
                  field: :"#{type}_conditional_value",
                  width: 10,
                  label_text: t("question_flow.#{i18n_key}.#{type}.#{level}_instruction")
    - else
      h2.govuk-heading-m class="govuk-!-margin-top-9 govuk-!-margin-bottom-2"
        = t("question_flow.#{i18n_key}.#{type}.label")
      span.govuk-caption-m class="govuk-!-margin-bottom-4"
        = t("question_flow.#{i18n_key}.#{type}.hint")

      - if type == :other
        = render "shared/cost_of_living"
      - level = @form.level_of_help == "controlled" ? "controlled" : "certificated"
      = render "shared/money_input",
              form:,
              field: :"#{type}_value",
              width: 10,
              label_text: t("question_flow.#{i18n_key}.#{type}.#{level}_instruction"),
              set_aria: true,
              level:

  = form.govuk_submit t("generic.save_and_continue")
