- if @early_eligibility_selection == "gross" || @early_assessment == "gross_income"
     p class="govuk-body" = t(".not_assessed")
- else
  - if @is_pdf == true
      - (@model.has_partner? ? "results.show.capital_header.partner" : "results.show.capital_header.client").tap do |text|
        ul.govuk-list style="list-style-type: none; margin: 0;"
          li
            - if @model.level_of_help == "controlled"
              = t("#{text}.first_controlled")
            - else
              = t("#{text}.first_certificated")
          li class="govuk-!-margin-bottom-8"
            = t("#{text}.second")
  - else
      - (@model.has_partner? ? "results.show.capital_header.partner" : "results.show.capital_header.client").tap do |text|
        p
          - if @model.level_of_help == "controlled"
            = t("#{text}.first_controlled")
          - else
            = t("#{text}.first_certificated")
        p class="govuk-!-margin-bottom-8"
          = t("#{text}.second")

  - if @model.vehicle_owned?
    - @model.display_household_vehicles.each_with_index do |vehicle, index|
      - count = index + 1
      = pdf_friendly_h2(t("results.show.vehicles", number: count).to_s, "m", @is_pdf)
      = govuk_table do |table|
        - table.with_body do |body|
          - vehicle.each do |key, value|
            - body.with_row do |row|
              - row.with_cell(header: true, text: t("results.show.vehicle.#{key}"))
              - pdf_friendly_numeric_table_cell(row, value, bold_text: false)
          - body.with_row(classes: %w[solid-top-border]) do |row|
            - row.with_cell(header: true, text: t("results.show.vehicle.assessed_value"))
            - pdf_friendly_numeric_table_cell(row, @model.household_vehicle_assessed_value(index), bold_text: true)

  - if @model.client_owns_main_home?
    = render "property_table",
            caption_size:,
            person: :client,
            type: :main_home,
            data: @model.main_home_data,
            assessed_value: @model.main_home_assessed_equity

  - @model.client_additional_property_data.each_with_index do |property, index|
    = render "property_table",
            caption_size:,
            person: :client,
            type: :additional_property,
            counter: index + 1,
            data: property,
            assessed_value: @model.client_additional_property_assessed_equity(index)

  - @model.partner_additional_property_data.each_with_index do |property, index|
    = render "property_table",
            caption_size:,
            person: :partner,
            type: :additional_property,
            counter: index + 1,
            data: property,
            assessed_value: @model.partner_additional_property_assessed_equity(index)

  = render "disposable_capital_table",
          caption_size:,
          caption: t("results.show.client_disposable_capital"),
          person: :client,
          rows: @model.client_capital_rows,
          subtotal_rows: @model.client_capital_subtotal_rows,
          assessed_capital: (@model.client_assessed_capital if @model.has_partner?)

  - if @model.has_partner?
    = render "disposable_capital_table",
            caption_size:,
            caption: t("results.show.partner_disposable_capital"),
            person: :partner,
            rows: @model.partner_capital_rows,
            assessed_capital: @model.partner_assessed_capital

    - if @model.pensioner_disregard_applied?
      = govuk_table do |table|
        - table.with_caption(size: caption_size, text: t("results.show.pensioner_disregard"))
        - table.with_body do |body|
          - body.with_row do |row|
            - row.with_cell(classes: %w[no-bottom-border], text: t("results.show.pensioner_disregard_caption"))
            - row.with_cell(classes: %w[no-bottom-border], text: "")
          - @model.pensioner_disregard_rows.each do |type, amount|
            - body.with_row do |row|
              - row.with_cell(header: true, text: t("results.show.pensioner_disregard_types.#{type}"))
              - pdf_friendly_numeric_table_cell(row, amount, bold_text: false)
          - body.with_row(classes: %w[solid-top-border]) do |row|
            - row.with_cell(header: true, text: t("results.show.pensioner_disregard_types.assessed_capital"))
            - pdf_friendly_numeric_table_cell(row, @model.total_calculated_capital, bold_text: true)

  = pdf_friendly_h2(t("results.show.total"), caption_size.to_s, @is_pdf)
  = govuk_table do |table|
    - table.with_body do |body|
      - body.with_row(classes: %w[solid-top-border]) do |row|
        - row.with_cell(header: true, text: t("results.show.total_assessed_capital"))
        - pdf_friendly_numeric_table_cell(row, @model.total_calculated_capital, bold_text: true)
      - body.with_row(classes: %w[solid-bottom-border]) do |row|
        - row.with_cell(classes: %w[govuk-!-font-weight-regular], header: true, text: t("results.show.capital_upper_threshold"))
        - pdf_friendly_numeric_table_cell(row, @model.capital_upper_threshold, bold_text: false)

  = render "ineligible_explanation", value_type: :capital
