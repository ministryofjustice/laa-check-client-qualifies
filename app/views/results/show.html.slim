- content_for :page_title
  - if @model.decision == "ineligible"
    = t(@check.controlled? ? ".controlled_ineligible" : ".not_likely_to_qualify")
  - else
    = t(@check.controlled? ? ".controlled_qualifies" : ".likely_to_qualify")

- content_for :back do
  - if FeatureFlags.enabled?(:ee_banner, @check.session_data) && @early_result_type
    = back_link(@previous_step, true)
  -else
    = link_to t("generic.back"), check_answers_path(assessment_code: params[:assessment_code]), class: "govuk-back-link"

.govuk-grid-column-full
  = render "shared/heading"
  .govuk-panel.panel-blue-white-text.govuk-panel--confirmation class="govuk-!-text-align-left govuk-!-margin-bottom-9"
    .govuk-panel__body
      = render "result_panel_content"

  - if @model.any_calculations_performed?
    - if FeatureFlags.enabled?(:ee_banner, @check.session_data) && @early_result_type
      h2.govuk-heading-m = t(".section_summaries.your_clients_key_eligibility_totals")
      .summary-box-holder class="govuk-!-margin-bottom-5"
        - %i[gross_income disposable_income capital].each
          = render("early_summary", section: _1, links: true) if @model.calculated?(_1)
    - else
      h2.govuk-heading-m = t(".section_summaries.your_clients_key_eligibility_totals")
      .summary-box-holder class="govuk-!-margin-bottom-5"
        - %i[gross_income disposable_income capital].each
          = render("summary", section: _1, links: true) if @model.calculated?(_1)

  - if @journey_continues_on_another_page
    h2.govuk-heading-m = t(".save_results")
    p.govuk-body = t(".save_results_intro")
    - if @check.asylum_support || @check.under_eighteen_no_means_test_required?
      ul.govuk-list.govuk-list--bullet
        - t(".save_results_bullets_no_means_test").each
          li = _1
    - else
      ul.govuk-list.govuk-list--bullet
        - t(".save_results_bullets").each
          li = _1

    .govuk-button-group
      = link_to t(".save_as_pdf"),
            download_result_path(params[:assessment_code]),
            target: "_blank", rel: "noopener", class: "govuk-button govuk-button--secondary", id: "save_as_pdf_controlled"

    h2.govuk-heading-m = t(".complete_a_cw_form")
    p.govuk-body = t(".complete_a_cw_form_paragraph#{'_under_eighteen' if @check.under_eighteen_no_means_test_required?}")
    h2.govuk-heading-s = t(".download_a_cw_form_header")

    = link_to t("results.show.continue_to_cw"),
              controlled_work_document_selection_path(assessment_code: params[:assessment_code]),
              class: "govuk-button", data: { module: "govuk-button" }

  - elsif @check.under_eighteen_no_means_test_required?
    = render "under_eighteen_next_steps", download_option: true
  - elsif @model.level_of_help == "certificated"
    = render "certificated_next_steps"

    = govuk_details(summary_text: t(".evidence_needed")) do
      = render "evidence"

  - elsif @model.level_of_help == "controlled" && @model.decision == "ineligible"
    h2.govuk-heading-m = t(".what_happens_next")
    p.govuk-body = t(".what_happens_next_controlled_ineligible_next_step")

  - if @model.any_calculations_performed?
    h2.govuk-heading-m = t(".#{@model.level_of_help}_how_calculated")
    = govuk_accordion do |accordion|
      - accordion.with_section(heading_text: t(".legislation_header"))
        = render "legislation_table", caption_size: "m"
      ruby:
        key = if @model.level_of_help == "certificated" && !@check.immigration_or_asylum?
                ".upper_and_lower_limits_calculation_header"
              else
                ".upper_limits_calculation_header"
              end
      - accordion.with_section(heading_text: t(key))
        = render "limits_table", caption_size: "m"

      - if @model.calculated?(:gross_income)
        - accordion.with_section(heading_text: t(".income_calculation"))
          = render "income_table", caption_size: "m"

      - if @model.calculated?(:disposable_income)
        - accordion.with_section(heading_text: t(".outgoings_calculation"))
          = render "outgoings_table", caption_size: "m"

      - if @model.calculated?(:capital)
        - accordion.with_section(heading_text: t(".capital_calculation"))
          = render "capital_table", caption_size: "m"

  - unless @journey_continues_on_another_page || @check.under_eighteen_no_means_test_required?
    .govuk-button-group
      = link_to t(".save_as_pdf"), download_result_path(params[:assessment_code]),
                                    target: "_blank", rel: "noopener", class: "govuk-button", id: "save_as_pdf_certificated"
      = link_to t(".start_another_check"), new_check_path, class: "govuk-button govuk-button--secondary", data: { module: "govuk-button" }
