- content_for :page_title
  - if @model.decision == "ineligible"
    = t(".not_likely_to_qualify")
  - else
    = t(".likely_to_qualify")

- content_for :back do
  = link_to t("generic.back"), check_answers_path(assessment_code: params[:assessment_code]), class: "govuk-back-link"

.govuk-grid-column-full
  = render "shared/heading"
  .govuk-panel.panel-blue.govuk-panel--confirmation class="govuk-!-text-align-left govuk-!-margin-bottom-9"
    .govuk-panel__body
      = render "result_panel_content"

  - if @model.level_of_help == "certificated"
    h2.govuk-heading-m = t(".what_happens_next")
    - if @check.upper_tribunal?
      p.govuk-body = t(".next_steps_without_apply_paragraph_1")
    - else
      p.govuk-body = t(".next_steps_paragraph_1")
    p.govuk-body = t(".next_steps_paragraph_2")

    = govuk_details(summary_text: t(".evidence_needed")) do
      = render "evidence"

  - if @model.calculated?(:gross_income) || @model.calculated?(:disposable_income) || @model.calculated?(:capital)
    h2.govuk-heading-m = t(".#{@model.level_of_help}_how_calculated")
    = govuk_accordion do |accordion|
      - accordion.with_section(heading_text: t(".legislation_header"))
        = render "legislation_table", caption_size: "m"
      ruby:
        key = if @model.level_of_help == "certificated" && !@check.upper_tribunal?
                ".upper_and_lower_limits_calculation_header"
              else
                ".upper_limits_calculation_header"
              end
      - accordion.with_section(heading_text: t(key))
        = render "limits_table", caption_size: "m"

      - if @model.calculated?(:gross_income)
        - accordion.with_section(heading_text: t(".income_calculation"))
          = render "income_table", caption_size: "m"

      - if @model.calculated?(:disposable_income)
        - accordion.with_section(heading_text: t(".outgoings_calculation"))
          = render "outgoings_table", caption_size: "m"

      - if @model.calculated?(:capital)
        - accordion.with_section(heading_text: t(".capital_calculation"))
          = render "capital_table", caption_size: "m"

  .govuk-button-group
    / For eligible controlled checks there is no primary CTA in this group, as it appears below.
    / For other checks, 'Save as PDF' is the primary CTA.
    - if @model.level_of_help == "controlled" && @model.decision == "eligible"
      = link_to t(".save_as_pdf"),
                download_result_path(params[:assessment_code]),
                target: "_blank", rel: "noopener", class: "govuk-button govuk-button--secondary"
      = link_to t(".print_page"),
                print_result_path(params[:assessment_code]),
                target: "_blank", rel: "noopener", class: "govuk-button govuk-button--secondary"
    - else
      = link_to t(".save_as_pdf"), download_result_path(params[:assessment_code]), target: "_blank", rel: "noopener", class: "govuk-button"
      = link_to t(".print_page"),
                print_result_path(params[:assessment_code]),
                target: "_blank", rel: "noopener", class: "govuk-button govuk-button--secondary"
      = link_to t(".start_another_check"), new_check_path, class: "govuk-button govuk-button--secondary", data: { module: "govuk-button" }

  - if @model.level_of_help == "controlled" && @model.decision == "eligible"
    h2.govuk-heading-m = t(".what_happens_next")

    = render "controlled_work_next_steps", cta: true
      = govuk_details(summary_text: t("results.show.evidence_needed")) do
        = render "evidence"
  - else
    = render "shared/survey_prompt"
